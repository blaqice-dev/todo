{"version":3,"sources":["components/views/todoBannerView.js","components/TodoBanner.js","components/TodoCreator.js","components/views/todoCreatorView.js","components/views/todoTableView.js","components/TodoTable.js","components/views/visibilityControlView.js","components/VisibilityControl.js","views/indexView.js","components/views/todoRowView.js","components/TodoRow.js","App.js","serviceWorker.js","index.js"],"names":["todoBannerView","TodoBanner","className","props","name","tasks","filter","todo_item","done","length","render","Component","TodoCreator","updateNewTextValue","event","setState","new_item_text","target","value","createNewTodo","state","callback","onChange","onClick","todoCreatorView","todoTableView","TodoTable","style","css","done_value","border","borderRadius","visibilityControlView","VisibilityControl","type","checked","isChecked","e","description","background","show","display","hide","indexView","app","user_name","todo_items","todoTableData","item","show_completed","todoRowView","TodoRow","action","App","task","find","toggleTodo","todo","map","key","show_main_table_container","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5f25a19.chunk.js","sourcesContent":["import React from 'react'\n\n\nexport function todoBannerView(TodoBanner) {\n    return (\n        <h4 className='bg-dark text-light text-center p-2'>\n            { TodoBanner.props.name }'s To Do List<br />\n            <small>({\n                TodoBanner.props.tasks.filter(\n                    todo_item => !todo_item.done\n                ).length\n            } items to do)\n            </small>\n        </h4>\n    )\n}\n\n","import { Component } from 'react'\nimport { todoBannerView } from './views/todoBannerView'\n\nexport class TodoBanner extends Component {\n    render = () => todoBannerView(this)\n}\n","import { Component } from 'react'\nimport { todoCreatorView } from './views/todoCreatorView'\n\n\nexport class TodoCreator extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { new_item_text: '' }\n    }\n\n    updateNewTextValue = (event) => {\n        this.setState({ new_item_text: event.target.value})\n    }\n\n    createNewTodo = () => {\n        if (this.state.new_item_text) {\n            this.props.callback(this.state.new_item_text)\n            this.setState({ new_item_text: '' })\n        }\n    }\n\n    render = () => todoCreatorView(this)\n}\n","import React from 'react'\n\n\nexport function todoCreatorView(TodoCreator) {\n    return (\n        <div className='my-1'>\n            <input\n                className='form-control'\n                value={TodoCreator.state.new_item_text}\n                onChange={TodoCreator.updateNewTextValue}\n            />\n            <button\n                className='btn btn-dark text-light mt-1'\n                onClick={TodoCreator.createNewTodo}\n            >ADD\n            </button>\n        </div>\n    )\n}\n","import React from 'react'\n\n\nexport function todoTableView(TodoTable) {\n    return (\n        <div style={TodoTable.props.css}>\n            <table className='table table-striped table-bordered'>\n                <thead>\n                    <tr>\n                        <th>Description</th><th>Done</th>\n                    </tr>\n                </thead>\n                {\n                    TodoTable.props.done_value === false &&\n                    <tbody>{TodoTable.props.callback(false)}</tbody>\n                }\n                {\n                    TodoTable.props.done_value === true &&\n                    <tbody>{TodoTable.props.callback(true)}</tbody>\n                }\n            </table>\n        </div>\n    )\n}\n","import { Component } from 'react'\nimport { todoTableView } from './views/todoTableView'\n\n\nexport class TodoTable extends Component {\n    render = () => todoTableView(this)\n}\n","import React from 'react'\n\n\nvar css = {\n    style: { border: 'none', borderRadius: '0px' }\n}\n\n\nexport function visibilityControlView(VisibilityControl) {\n    return (\n        <div className='form-control bg-secondary text-white text-center' style={css.style}>\n            <input\n                className='form-check-input'\n                type='checkbox'\n                checked={VisibilityControl.props.isChecked}\n                onChange={(e) => VisibilityControl.props.callback(e.target.checked)}\n            />\n            <label className=\"form-check-label\">\n                Show {VisibilityControl.props.description}\n            </label>\n        </div>\n    )\n}\n","import { Component } from 'react'\nimport { visibilityControlView } from './views/visibilityControlView'\n\n\nexport class VisibilityControl extends Component {\n    render = () => visibilityControlView(this)\n}\n","import React from 'react'\nimport { TodoBanner } from '../components/TodoBanner'\nimport { TodoCreator } from '../components/TodoCreator'\nimport { TodoTable } from '../components/TodoTable'\nimport { VisibilityControl } from '../components/VisibilityControl'\n\n\nvar css = {\n    style: { background: 'transparent' },\n    show: { display: 'block' },\n    hide: { display: 'none' }\n}\n\n\nfunction indexView(app) {\n    return (\n        <div>\n            <TodoBanner\n                name={app.state.user_name}\n                tasks={app.state.todo_items}\n            />\n            <div className='container-fluid'>\n                <TodoCreator callback={app.createNewTodo} />\n            </div>\n            <div className='container-fluid mt-3'>\n                <div className='row'>\n                    <div className='col-sm table-container'>\n                        <TodoTable done_value={false} callback={app.todoTableData} css={\n                            app.state.todo_items.filter(item => item.done === false).length > 0 \n                            ? css.show: css.hide} \n                        />\n                    </div>\n                    <div className='col-sm' style={css.style}>\n                        <VisibilityControl\n                            description='Completed Tasks'\n                            isChecked={app.state.show_completed}\n                            callback={(checked) => app.setState({\n                                show_completed: checked\n                            })}\n                        />\n                        {\n                            app.state.show_completed &&\n                            <TodoTable done_value={true} callback={app.todoTableData}  css={\n                                app.state.todo_items.filter(item => item.done === true).length > 0 \n                                ? css.show: css.hide } \n                            />\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default indexView\n","import React from 'react'\n\n\nexport function todoRowView(TodoRow) {\n    return (\n        <tr>\n            <td>{ TodoRow.props.item.action }</td>\n            <td>\n                <input\n                    type='checkbox'\n                    checked={ TodoRow.props.item.done }\n                    onChange={ () => TodoRow.props.callback(TodoRow.props.item)}\n                />\n            </td>\n        </tr>\n    )\n}\n","import { Component } from 'react'\nimport { todoRowView } from './views/todoRowView'\n\n\nexport class TodoRow extends Component {\n    render = () => todoRowView(this)\n}\n","import React, { Component } from 'react';\nimport indexView from './views/indexView'\nimport { TodoRow } from './components/TodoRow';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_name: 'Joa',\n            todo_items: [\n                { action: 'Learn HTML5', done: false },\n                { action: 'Learn CSS3', done: false },\n                { action: 'Learn JavaScript', done: false },\n                { action: 'Learn Bootstrap', done: false },\n                { action: 'Learn ReactJS', done: false },\n                { action: 'Learn NodeJS', done: false },\n                { action: 'Learn ExpressJS', done: false },\n                { action: 'Learn MongoDB', done: false },\n                { action: 'Learn Web Testing', done: false },\n                { action: 'Learn Mocha', done: false }\n            ],\n            show_completed: false,\n            show_main_table_container: true\n        }\n    }\n\n    updateNewTextValue = (event) => {\n        this.setState({ new_item_text: event.target.value })\n    }\n\n    createNewTodo = (task) => {\n        if (!this.state.todo_items.find(item => item.action === task)) {\n            this.setState({\n                todo_items: [...this.state.todo_items, { action: task, done: false }]\n            })\n        }\n    }\n\n    toggleTodo = (todo) => this.setState({\n        todo_items: this.state.todo_items.map(item => item.action === todo.action\n            ? { ...item, done: !item.done } : item\n        )\n    })\n\n    todoTableData = (done_value) => this.state.todo_items.filter(item => \n        item.done === done_value).map(item => \n        <TodoRow key={item.action} item={item} callback={this.toggleTodo} />\n    )\n\n    render = () => (indexView(this))\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}